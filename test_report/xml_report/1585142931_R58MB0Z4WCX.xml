<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="2" failures="0" hostname="liqingMacBook-Pro.local" name="pytest" skipped="0" tests="2" time="24.708" timestamp="2020-03-25T21:28:52.281781"><testcase classname="test_case.test_weather_condition.TestWeatherCondition" file="test_case/test_weather_condition.py" line="24" name="test_weather_desc_equal" time="20.434"><error message="test setup failure">cls = &lt;class &apos;_pytest.runner.CallInfo&apos;&gt;
func = &lt;function call_runtest_hook.&lt;locals&gt;.&lt;lambda&gt; at 0x1099b7d90&gt;
when = &apos;setup&apos;
reraise = (&lt;class &apos;_pytest.outcomes.Exit&apos;&gt;, &lt;class &apos;KeyboardInterrupt&apos;&gt;)

    @classmethod
    def from_call(cls, func, when, reraise=None):
        #: context of invocation: one of &quot;setup&quot;, &quot;call&quot;,
        #: &quot;teardown&quot;, &quot;memocollect&quot;
        start = time()
        excinfo = None
        try:
&gt;           result = func()

/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/_pytest/runner.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/_pytest/runner.py:201: in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pluggy/hooks.py:286: in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pluggy/manager.py:92: in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pluggy/manager.py:86: in &lt;lambda&gt;
    firstresult=hook.spec.opts.get(&quot;firstresult&quot;) if hook.spec else False,
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/_pytest/nose.py:12: in pytest_runtest_setup
    call_optional(item.parent.obj, &quot;setup&quot;)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

obj = &lt;test_case.test_weather_condition.TestWeatherCondition object at 0x1099c5400&gt;
name = &apos;setup&apos;

    def call_optional(obj, name):
        method = getattr(obj, name, None)
        isfixture = hasattr(method, &quot;_pytestfixturefunction&quot;)
        if method is not None and not isfixture and callable(method):
            # If there&apos;s any problems allow the exception to raise rather than
            # silently ignoring them
&gt;           method()
E           TypeError: setup() missing 1 required positional argument: &apos;browser&apos;

/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/_pytest/nose.py:37: TypeError</error></testcase><testcase classname="test_case.test_weather_condition.TestWeatherCondition" file="test_case/test_weather_condition.py" line="33" name="test_temp_equal" time="0.552"><error message="test setup failure">cls = &lt;class &apos;_pytest.runner.CallInfo&apos;&gt;
func = &lt;function call_runtest_hook.&lt;locals&gt;.&lt;lambda&gt; at 0x109bc1b70&gt;
when = &apos;setup&apos;
reraise = (&lt;class &apos;_pytest.outcomes.Exit&apos;&gt;, &lt;class &apos;KeyboardInterrupt&apos;&gt;)

    @classmethod
    def from_call(cls, func, when, reraise=None):
        #: context of invocation: one of &quot;setup&quot;, &quot;call&quot;,
        #: &quot;teardown&quot;, &quot;memocollect&quot;
        start = time()
        excinfo = None
        try:
&gt;           result = func()

/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/_pytest/runner.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/_pytest/runner.py:201: in &lt;lambda&gt;
    lambda: ihook(item=item, **kwds), when=when, reraise=reraise
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pluggy/hooks.py:286: in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pluggy/manager.py:92: in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pluggy/manager.py:86: in &lt;lambda&gt;
    firstresult=hook.spec.opts.get(&quot;firstresult&quot;) if hook.spec else False,
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/_pytest/nose.py:12: in pytest_runtest_setup
    call_optional(item.parent.obj, &quot;setup&quot;)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

obj = &lt;test_case.test_weather_condition.TestWeatherCondition object at 0x109a83e48&gt;
name = &apos;setup&apos;

    def call_optional(obj, name):
        method = getattr(obj, name, None)
        isfixture = hasattr(method, &quot;_pytestfixturefunction&quot;)
        if method is not None and not isfixture and callable(method):
            # If there&apos;s any problems allow the exception to raise rather than
            # silently ignoring them
&gt;           method()
E           TypeError: setup() missing 1 required positional argument: &apos;browser&apos;

/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/_pytest/nose.py:37: TypeError</error></testcase></testsuite></testsuites>